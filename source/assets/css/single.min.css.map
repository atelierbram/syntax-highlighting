{"version":3,"sourceRoot":"","sources":["file:///Users/bram/Sites/github.com/atelierbram/syntax-highlighting/source/_assets/sass/modules/_pagination.scss","file:///Users/bram/Sites/github.com/atelierbram/syntax-highlighting/source/_assets/sass/modules/_mq.scss"],"names":[],"mappings":"AAAA,UACE,WACA,sBACA,eACA,cACA,aACA,8BACA,6BAEA,yBAEE,qBAEF,YACE,cACA,qBAEA,kBACE,cACA,2BACA,sBACE,aAYR,aAGE,cACA,mBACA,SCkDA,2BDvDF,aAQI,WC+CF,2BD5CF,yBAEI,YC0CF,2BDvCF,0BAEI,aAKJ,sDAEE,iBAIA,eACE,kBACA,aACA,mBACA,gBACA,qBACA,qBACA,mBACA,2BAEF,4BACE,yBAEF,eACE,qBAEF,gBACE,sBCSF,2BDVA,gBAGI,aACA,eCMJ,2BDVA,gBAOI,iBCGJ,2BDVA,gBAUI,iBAGJ,2BACE,kBAEF,4BACE","file":"single.min.css","sourcesContent":[".prevnext {\n  clear: both;\n  margin-bottom: 1.125em;\n  margin-top: 3em;\n  overflow: auto;\n  display: flex;\n  justify-content: space-between;\n  border-top: 2px solid color(monochrome-bluesky-07);\n\n  li,\n  a {\n    display: inline-block;\n  }\n  a {\n    color: color(monochrome-bluesky-10);\n    padding: 0.125em 0.65em;\n\n    &:hover {\n      color: color(red-12);\n      box-shadow: none !important;\n      svg {\n        fill: color(red-12);\n      }\n    }\n  }\n\n}\n\n// .page-type-index .prevnext {\n//   padding-left: 2rem;\n//   padding-right: 2rem;\n// }\n\n.prevnext h5 {\n  // font-family: AvenirNextCondensed-Regular, Corbel, \"Lucida Grande\", \"Trebuchet Ms\", \"Segoe Ui\", \"DejaVu Sans Condensed\", \"Liberation Sans\", \"Nimbus Sans L\", sans-serif;\n  // width: 50%;\n  font-size: 1em;\n  font-weight: normal;\n  margin: 0;\n\n  @include mq($from: desktop) {\n    width: 50%;\n  }\n}\n.prevnext .prevnext_left {\n  @include mq($from: desktop) {\n    float: left;\n  }\n}\n.prevnext .prevnext_right {\n  @include mq($from: desktop) {\n    float: right;\n  }\n}\n\n\n.prevnext .prevnext_right,\n.prevnext h5:nth-of-type(2) {\n  text-align: right;\n}\n\n.prevnext {\n  h5 a {\n    position: relative;\n    display: flex;\n    align-items: center;\n    padding: .75em 0;\n    text-decoration: none;\n    transition: color .3s;\n    border-bottom: none;\n    box-shadow: none !important;\n  }\n  .prevnext_right a {\n    justify-content: flex-end;\n  }\n  span {\n    display: inline-block;\n  }\n  .icon {\n    vertical-align: middle;\n    @include mq($until: phablet) {\n      width: 0.75rem;\n      height: 0.75rem;\n    }\n    @include mq($from: phablet) {\n      padding-top: 1px;\n    }\n    @include mq($from: desktop) {\n      padding-top: 2px;\n    }\n  }\n  .icon-arrow-left {\n    margin-right: .5em;\n  }\n  .icon-arrow-right {\n    margin-left: .5em;\n  }\n}\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n$breakpoints: (\n  mobile:  320px,\n  phablet: 500px,\n  tablet:  740px,\n  desktop: 980px,\n  wide:    1300px,\n  xlwide:  1850px\n) !default;\n\n$bp-mobile:  320px;\n$bp-phablet: 500px;\n$bp-tablet:  740px;\n$bp-desktop: 980px;\n$bp-wide:    1300px;\n$bp-xlwide:  1850px;\n\n\n$show-breakpoints: (mobile, phablet, tablet, desktop, wide, xlwide) !default;\n\n$media-type: all !default;\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n"]}