{"version":3,"sourceRoot":"","sources":["file:///Users/bram/Sites/github.com/atelierbram/syntax-highlighting/source/_assets/sass/modules/_mq.scss","file:///Users/bram/Sites/github.com/atelierbram/syntax-highlighting/source/_assets/sass/modules/_mq-local.scss","file:///Users/bram/Sites/github.com/atelierbram/syntax-highlighting/source/_assets/sass/local.scss"],"names":[],"mappings":";AAwFE;EC/EA;IAcM;;;ADiEN;EC/EA;IAcM;;;ADiEN;EC/EA;IAcM;;;ADiEN;EC/EA;IAcM;;;ADiEN;EC/EA;IAcM;;;ADiEN;EC/EA;IAcM;;;;ACdR;AAAA;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;;;AAEF;EACE;;;AAEF;EACE","file":"local.css","sourcesContent":["@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n$breakpoints: (\n  mobile:  320px,\n  phablet: 500px,\n  tablet:  740px,\n  desktop: 980px,\n  wide:    1300px,\n  xlwide:  1850px\n) !default;\n\n$bp-mobile:  320px;\n$bp-phablet: 500px;\n$bp-tablet:  740px;\n$bp-desktop: 980px;\n$bp-wide:    1300px;\n$bp-xlwide:  1850px;\n\n\n$show-breakpoints: (mobile, phablet, tablet, desktop, wide, xlwide) !default;\n\n$media-type: all !default;\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n) {\n  // .server-local body::before {\n  .server-local body::before {\n    // color: #c09853;\n    // font-size: .65em;\n    // padding: 3px 6px;\n    // pointer-events: none;\n    // position: fixed;\n    // right: 0;\n    // top: 0;\n    // z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: '#{$show-breakpoint} â‰¥ #{$width} (#{px2em($width)})';\n      }\n    }\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n","@import \"modules/mq\";\n@import \"modules/mq-local\";\n\n// @media (min-aspect-ratio: 100/99) {\n//   .server-local body::after {\n//     content: \"landscape mode (min-aspect-ratio: 100/99)\";\n//   }\n// }\n\n.server-local body::before,\n.server-local body::after {\n  color: #666;\n  font-size: .5em;\n  padding: 3px 6px;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  z-index: 100;\n}\n.server-local body::before {\n  right: 0;\n}\n.server-local body::after {\n  left: 0;\n}\n\n"]}